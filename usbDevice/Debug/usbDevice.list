
usbDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c4  080066c4  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066cc  080066cc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066cc  080066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080066d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000180  08006854  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  08006854  00021c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125ae  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  0003275e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00035448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025592  00000000  00000000  00036930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7a4  00000000  00000000  0005bec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3264  00000000  00000000  0006a666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d8ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  0013d920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000180 	.word	0x20000180
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006654 	.word	0x08006654

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000184 	.word	0x20000184
 80001e8:	08006654 	.word	0x08006654

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fa14 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f806 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f86e 	bl	80005d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f4:	f005 fb54 	bl	8005ba0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x14>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 f89a 	bl	8006644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800055c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	; 0xa8
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 feb7 	bl	80022f4 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f924 	bl	80007d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f918 	bl	80027e4 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ba:	f000 f90d 	bl	80007d8 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a74      	ldr	r2, [pc, #464]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b72      	ldr	r3, [pc, #456]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a6d      	ldr	r2, [pc, #436]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b6b      	ldr	r3, [pc, #428]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	4b67      	ldr	r3, [pc, #412]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a66      	ldr	r2, [pc, #408]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b64      	ldr	r3, [pc, #400]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a5f      	ldr	r2, [pc, #380]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b5d      	ldr	r3, [pc, #372]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a58      	ldr	r2, [pc, #352]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b52      	ldr	r3, [pc, #328]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a51      	ldr	r2, [pc, #324]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <MX_GPIO_Init+0x1f0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f244 0181 	movw	r1, #16513	; 0x4081
 8000694:	484b      	ldr	r0, [pc, #300]	; (80007c4 <MX_GPIO_Init+0x1f4>)
 8000696:	f000 fc91 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	484a      	ldr	r0, [pc, #296]	; (80007c8 <MX_GPIO_Init+0x1f8>)
 80006a0:	f000 fc8c 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4844      	ldr	r0, [pc, #272]	; (80007cc <MX_GPIO_Init+0x1fc>)
 80006bc:	f000 fad2 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c0:	2332      	movs	r3, #50	; 0x32
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d0:	230b      	movs	r3, #11
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	483c      	ldr	r0, [pc, #240]	; (80007cc <MX_GPIO_Init+0x1fc>)
 80006dc:	f000 fac2 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e0:	2386      	movs	r3, #134	; 0x86
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f0:	230b      	movs	r3, #11
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4835      	ldr	r0, [pc, #212]	; (80007d0 <MX_GPIO_Init+0x200>)
 80006fc:	f000 fab2 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000700:	f244 0381 	movw	r3, #16513	; 0x4081
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	482a      	ldr	r0, [pc, #168]	; (80007c4 <MX_GPIO_Init+0x1f4>)
 800071a:	f000 faa3 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <MX_GPIO_Init+0x1f4>)
 800073c:	f000 fa92 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000740:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000752:	2307      	movs	r3, #7
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <MX_GPIO_Init+0x204>)
 800075e:	f000 fa81 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000762:	2340      	movs	r3, #64	; 0x40
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_GPIO_Init+0x1f8>)
 800077a:	f000 fa73 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_GPIO_Init+0x1f8>)
 8000792:	f000 fa67 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000796:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0x1f8>)
 80007b4:	f000 fa56 	bl	8000c64 <HAL_GPIO_Init>

}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	; 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40021800 	.word	0x40021800
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f89a 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <OTG_FS_IRQHandler+0x10>)
 800088e:	f000 fcfe 	bl	800128e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20001894 	.word	0x20001894

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008dc:	4c0b      	ldr	r4, [pc, #44]	; (800090c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ea:	f7ff ffd7 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f005 fe85 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdf7 	bl	80004e4 <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000904:	080066d4 	.word	0x080066d4
  ldr r2, =_sbss
 8000908:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800090c:	20001c9c 	.word	0x20001c9c

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f94f 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff4c 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f967 	bl	8000c4a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f92f 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	200003c0 	.word	0x200003c0

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200003c0 	.word	0x200003c0

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff3e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff31 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e177      	b.n	8000f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 8166 	bne.w	8000f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d005      	beq.n	8000cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d017      	beq.n	8000d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80c0 	beq.w	8000f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <HAL_GPIO_Init+0x324>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a65      	ldr	r2, [pc, #404]	; (8000f88 <HAL_GPIO_Init+0x324>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <HAL_GPIO_Init+0x324>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e06:	4a61      	ldr	r2, [pc, #388]	; (8000f8c <HAL_GPIO_Init+0x328>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a58      	ldr	r2, [pc, #352]	; (8000f90 <HAL_GPIO_Init+0x32c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d037      	beq.n	8000ea2 <HAL_GPIO_Init+0x23e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a57      	ldr	r2, [pc, #348]	; (8000f94 <HAL_GPIO_Init+0x330>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d031      	beq.n	8000e9e <HAL_GPIO_Init+0x23a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a56      	ldr	r2, [pc, #344]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x236>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a55      	ldr	r2, [pc, #340]	; (8000f9c <HAL_GPIO_Init+0x338>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x232>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <HAL_GPIO_Init+0x33c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a53      	ldr	r2, [pc, #332]	; (8000fa4 <HAL_GPIO_Init+0x340>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <HAL_GPIO_Init+0x344>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a51      	ldr	r2, [pc, #324]	; (8000fac <HAL_GPIO_Init+0x348>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x222>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a50      	ldr	r2, [pc, #320]	; (8000fb0 <HAL_GPIO_Init+0x34c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x21e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	e012      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e7e:	230a      	movs	r3, #10
 8000e80:	e010      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e82:	2308      	movs	r3, #8
 8000e84:	e00e      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e86:	2307      	movs	r3, #7
 8000e88:	e00c      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	e00a      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e008      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x240>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_GPIO_Init+0x328>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ee6:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eec:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f10:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_GPIO_Init+0x354>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f67f ae84 	bls.w	8000c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40021400 	.word	0x40021400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40021c00 	.word	0x40021c00
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	40022400 	.word	0x40022400
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd8:	e003      	b.n	8000fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	041a      	lsls	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff0:	b08f      	sub	sp, #60	; 0x3c
 8000ff2:	af0a      	add	r7, sp, #40	; 0x28
 8000ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e10f      	b.n	8001220 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f004 ffcc 	bl	8005fb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 feb9 	bl	8002db6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	687e      	ldr	r6, [r7, #4]
 800104c:	466d      	mov	r5, sp
 800104e:	f106 0410 	add.w	r4, r6, #16
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001062:	1d33      	adds	r3, r6, #4
 8001064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f001 fd90 	bl	8002b8c <USB_CoreInit>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0d0      	b.n	8001220 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fea7 	bl	8002dd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e04a      	b.n	8001126 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	333d      	adds	r3, #61	; 0x3d
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	333c      	adds	r3, #60	; 0x3c
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b298      	uxth	r0, r3
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	3342      	adds	r3, #66	; 0x42
 80010cc:	4602      	mov	r2, r0
 80010ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	333f      	adds	r3, #63	; 0x3f
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3344      	adds	r3, #68	; 0x44
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	3348      	adds	r3, #72	; 0x48
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	3350      	adds	r3, #80	; 0x50
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	3301      	adds	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3af      	bcc.n	8001090 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e044      	b.n	80011c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	3301      	adds	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d3b5      	bcc.n	8001136 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	687e      	ldr	r6, [r7, #4]
 80011d2:	466d      	mov	r5, sp
 80011d4:	f106 0410 	add.w	r4, r6, #16
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e8:	1d33      	adds	r3, r6, #4
 80011ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f001 fe3f 	bl	8002e70 <USB_DevInit>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e00d      	b.n	8001220 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 febb 	bl	8003f94 <USB_DevDisconnect>

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001228 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_PCD_Start+0x1c>
 8001240:	2302      	movs	r3, #2
 8001242:	e020      	b.n	8001286 <HAL_PCD_Start+0x5e>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2b01      	cmp	r3, #1
 8001252:	d109      	bne.n	8001268 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fd91 	bl	8002d94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fe6b 	bl	8003f52 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b08d      	sub	sp, #52	; 0x34
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 ff29 	bl	80040fc <USB_GetMode>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f040 839d 	bne.w	80019ec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fe8d 	bl	8003fd6 <USB_ReadInterrupts>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8393 	beq.w	80019ea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fe84 	bl	8003fd6 <USB_ReadInterrupts>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d107      	bne.n	80012e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f002 0202 	and.w	r2, r2, #2
 80012e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fe72 	bl	8003fd6 <USB_ReadInterrupts>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d161      	bne.n	80013c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0210 	bic.w	r2, r2, #16
 800130a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f003 020f 	and.w	r2, r3, #15
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	0c5b      	lsrs	r3, r3, #17
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	2b02      	cmp	r3, #2
 8001336:	d124      	bne.n	8001382 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d035      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	6a38      	ldr	r0, [r7, #32]
 8001358:	f002 fca9 	bl	8003cae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001368:	441a      	add	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	441a      	add	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	619a      	str	r2, [r3, #24]
 8001380:	e016      	b.n	80013b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	0c5b      	lsrs	r3, r3, #17
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	2b06      	cmp	r3, #6
 800138c:	d110      	bne.n	80013b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001394:	2208      	movs	r2, #8
 8001396:	4619      	mov	r1, r3
 8001398:	6a38      	ldr	r0, [r7, #32]
 800139a:	f002 fc88 	bl	8003cae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	441a      	add	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0210 	orr.w	r2, r2, #16
 80013be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fe06 	bl	8003fd6 <USB_ReadInterrupts>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013d4:	d16e      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fe0c 	bl	8003ffc <USB_ReadDevAllOutEpInterrupt>
 80013e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013e6:	e062      	b.n	80014ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d057      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fe31 	bl	8004064 <USB_ReadDevOutEPInterrupt>
 8001402:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00c      	beq.n	8001428 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800141a:	461a      	mov	r2, r3
 800141c:	2301      	movs	r3, #1
 800141e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fdb0 	bl	8001f88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2308      	movs	r3, #8
 8001442:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 feaa 	bl	80021a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001462:	461a      	mov	r2, r3
 8001464:	2310      	movs	r3, #16
 8001466:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147e:	461a      	mov	r2, r3
 8001480:	2320      	movs	r3, #32
 8001482:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149a:	461a      	mov	r2, r3
 800149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3301      	adds	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d199      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fd8c 	bl	8003fd6 <USB_ReadInterrupts>
 80014be:	4603      	mov	r3, r0
 80014c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014c8:	f040 80c0 	bne.w	800164c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fdad 	bl	8004030 <USB_ReadDevAllInEpInterrupt>
 80014d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014dc:	e0b2      	b.n	8001644 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a7 	beq.w	8001638 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fdd3 	bl	80040a0 <USB_ReadDevInEPInterrupt>
 80014fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d057      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	2201      	movs	r2, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	69f9      	ldr	r1, [r7, #28]
 8001522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001526:	4013      	ands	r3, r2
 8001528:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001536:	461a      	mov	r2, r3
 8001538:	2301      	movs	r3, #1
 800153a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d132      	bne.n	80015aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3348      	adds	r3, #72	; 0x48
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4403      	add	r3, r0
 8001564:	3344      	adds	r3, #68	; 0x44
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4419      	add	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	1a9b      	subs	r3, r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	3348      	adds	r3, #72	; 0x48
 800157a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	2b00      	cmp	r3, #0
 8001580:	d113      	bne.n	80015aa <HAL_PCD_IRQHandler+0x31c>
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3350      	adds	r3, #80	; 0x50
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015a2:	461a      	mov	r2, r3
 80015a4:	2101      	movs	r1, #1
 80015a6:	f002 fddb 	bl	8004160 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f004 fd90 	bl	80060d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2308      	movs	r3, #8
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2310      	movs	r3, #16
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	2302      	movs	r3, #2
 8001624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fc1b 	bl	8001e6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	3301      	adds	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f af49 	bne.w	80014de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fcc0 	bl	8003fd6 <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800165c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001660:	d122      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800167c:	2b01      	cmp	r3, #1
 800167e:	d108      	bne.n	8001692 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fe26 	bl	80022dc <HAL_PCDEx_LPM_Callback>
 8001690:	e002      	b.n	8001698 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f004 fd96 	bl	80061c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fc92 	bl	8003fd6 <USB_ReadInterrupts>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016bc:	d112      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f004 fd52 	bl	8006178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fc74 	bl	8003fd6 <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f8:	f040 80c7 	bne.w	800188a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2110      	movs	r1, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fd0e 	bl	8003138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001720:	e056      	b.n	80017d0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172e:	461a      	mov	r2, r3
 8001730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001734:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001746:	0151      	lsls	r1, r2, #5
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	440a      	add	r2, r1
 800174c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001754:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	0151      	lsls	r1, r2, #5
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	440a      	add	r2, r1
 800176c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001770:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	461a      	mov	r2, r3
 8001784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001788:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	0151      	lsls	r1, r2, #5
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	440a      	add	r2, r1
 80017a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	0151      	lsls	r1, r2, #5
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	440a      	add	r2, r1
 80017c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	3301      	adds	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3a3      	bcc.n	8001722 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001806:	f043 030b 	orr.w	r3, r3, #11
 800180a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181c:	f043 030b 	orr.w	r3, r3, #11
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	e015      	b.n	8001850 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001836:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800183a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184a:	f043 030b 	orr.w	r3, r3, #11
 800184e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001862:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001874:	461a      	mov	r2, r3
 8001876:	f002 fc73 	bl	8004160 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fba1 	bl	8003fd6 <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189e:	d124      	bne.n	80018ea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fc37 	bl	8004118 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fc9f 	bl	80031f2 <USB_GetDevSpeed>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	f001 f958 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 80018c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4620      	mov	r0, r4
 80018d0:	f001 f9be 	bl	8002c50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f004 fc26 	bl	8006126 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fb71 	bl	8003fd6 <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d10a      	bne.n	8001914 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fc03 	bl	800610a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f002 0208 	and.w	r2, r2, #8
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fb5c 	bl	8003fd6 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001928:	d10f      	bne.n	800194a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4619      	mov	r1, r3
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f004 fc65 	bl	8006204 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fb41 	bl	8003fd6 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800195e:	d10f      	bne.n	8001980 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f004 fc38 	bl	80061e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800197e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fb26 	bl	8003fd6 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d10a      	bne.n	80019ac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f004 fc46 	bl	8006228 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fb10 	bl	8003fd6 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d115      	bne.n	80019ec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f004 fc36 	bl	8006244 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	e000      	b.n	80019ec <HAL_PCD_IRQHandler+0x75e>
      return;
 80019ea:	bf00      	nop
    }
  }
}
 80019ec:	3734      	adds	r7, #52	; 0x34
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}

080019f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_PCD_SetAddress+0x1a>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e013      	b.n	8001a34 <HAL_PCD_SetAddress+0x42>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fa6e 	bl	8003f06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	70fb      	strb	r3, [r7, #3]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	803b      	strh	r3, [r7, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da0f      	bge.n	8001a82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	3338      	adds	r3, #56	; 0x38
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	3304      	adds	r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	705a      	strb	r2, [r3, #1]
 8001a80:	e00f      	b.n	8001aa2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 020f 	and.w	r2, r3, #15
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001aae:	883a      	ldrh	r2, [r7, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	78ba      	ldrb	r2, [r7, #2]
 8001ab8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001acc:	78bb      	ldrb	r3, [r7, #2]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d102      	bne.n	8001ad8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_EP_Open+0xaa>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e00e      	b.n	8001b04 <HAL_PCD_EP_Open+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fba1 	bl	800323c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b02:	7afb      	ldrb	r3, [r7, #11]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da0f      	bge.n	8001b40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 020f 	and.w	r2, r3, #15
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	3338      	adds	r3, #56	; 0x38
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	705a      	strb	r2, [r3, #1]
 8001b3e:	e00f      	b.n	8001b60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_Close+0x6e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00e      	b.n	8001b98 <HAL_PCD_EP_Close+0x8c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fbdf 	bl	800334c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	6979      	ldr	r1, [r7, #20]
 8001c14:	f001 feba 	bl	800398c <USB_EP0StartXfer>
 8001c18:	e008      	b.n	8001c2c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	6979      	ldr	r1, [r7, #20]
 8001c28:	f001 fc6c 	bl	8003504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 020f 	and.w	r2, r3, #15
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c58:	681b      	ldr	r3, [r3, #0]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	3338      	adds	r3, #56	; 0x38
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc0:	7afb      	ldrb	r3, [r7, #11]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fe58 	bl	800398c <USB_EP0StartXfer>
 8001cdc:	e008      	b.n	8001cf0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6979      	ldr	r1, [r7, #20]
 8001cec:	f001 fc0a 	bl	8003504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d901      	bls.n	8001d18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e050      	b.n	8001dba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da0f      	bge.n	8001d40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	705a      	strb	r2, [r3, #1]
 8001d3e:	e00d      	b.n	8001d5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_EP_SetStall+0x82>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e01e      	b.n	8001dba <HAL_PCD_EP_SetStall+0xc0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 ffe7 	bl	8003d5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001daa:	461a      	mov	r2, r3
 8001dac:	f002 f9d8 	bl	8004160 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d901      	bls.n	8001de0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e042      	b.n	8001e66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da0f      	bge.n	8001e08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3338      	adds	r3, #56	; 0x38
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	705a      	strb	r2, [r3, #1]
 8001e06:	e00f      	b.n	8001e28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_PCD_EP_ClrStall+0x86>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e00e      	b.n	8001e66 <HAL_PCD_EP_ClrStall+0xa4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 ffef 	bl	8003e3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b08a      	sub	sp, #40	; 0x28
 8001e72:	af02      	add	r7, sp, #8
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3338      	adds	r3, #56	; 0x38
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d901      	bls.n	8001ea6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06c      	b.n	8001f80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d902      	bls.n	8001ec2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3303      	adds	r3, #3
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eca:	e02b      	b.n	8001f24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d902      	bls.n	8001ee8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3303      	adds	r3, #3
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4603      	mov	r3, r0
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f001 fe93 	bl	8003c32 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	441a      	add	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d809      	bhi.n	8001f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d203      	bcs.n	8001f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1be      	bne.n	8001ecc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d811      	bhi.n	8001f7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	2201      	movs	r2, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	333c      	adds	r3, #60	; 0x3c
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	f040 80a0 	bne.w	8002100 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a72      	ldr	r2, [pc, #456]	; (8002198 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f240 80dd 	bls.w	800218e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80d7 	beq.w	800218e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fec:	461a      	mov	r2, r3
 8001fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff2:	6093      	str	r3, [r2, #8]
 8001ff4:	e0cb      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200c:	461a      	mov	r2, r3
 800200e:	2320      	movs	r3, #32
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e0bc      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 80b7 	bne.w	800218e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <PCD_EP_OutXfrComplete_int+0x210>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d90f      	bls.n	8002048 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002044:	6093      	str	r3, [r2, #8]
 8002046:	e0a2      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	0159      	lsls	r1, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	440b      	add	r3, r1
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800206e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4403      	add	r3, r0
 800207e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002082:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4403      	add	r3, r0
 80020a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4419      	add	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4403      	add	r3, r0
 80020bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d114      	bne.n	80020f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d108      	bne.n	80020f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ea:	461a      	mov	r2, r3
 80020ec:	2101      	movs	r1, #1
 80020ee:	f002 f837 	bl	8004160 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f003 ffd1 	bl	80060a0 <HAL_PCD_DataOutStageCallback>
 80020fe:	e046      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a26      	ldr	r2, [pc, #152]	; (800219c <PCD_EP_OutXfrComplete_int+0x214>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d124      	bne.n	8002152 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	461a      	mov	r2, r3
 8002120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	e032      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213e:	461a      	mov	r2, r3
 8002140:	2320      	movs	r3, #32
 8002142:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f003 ffa8 	bl	80060a0 <HAL_PCD_DataOutStageCallback>
 8002150:	e01d      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800217a:	461a      	mov	r2, r3
 800217c:	2100      	movs	r1, #0
 800217e:	f001 ffef 	bl	8004160 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f003 ff89 	bl	80060a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	4f54300a 	.word	0x4f54300a
 800219c:	4f54310a 	.word	0x4f54310a

080021a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	333c      	adds	r3, #60	; 0x3c
 80021b8:	3304      	adds	r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <PCD_EP_OutSetupPacket_int+0x88>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d90e      	bls.n	80021f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d009      	beq.n	80021f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ec:	461a      	mov	r2, r3
 80021ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f003 ff41 	bl	800607c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <PCD_EP_OutSetupPacket_int+0x88>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d90c      	bls.n	800221c <PCD_EP_OutSetupPacket_int+0x7c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002214:	461a      	mov	r2, r3
 8002216:	2101      	movs	r1, #1
 8002218:	f001 ffa2 	bl	8004160 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	4f54300a 	.word	0x4f54300a

0800222c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	4613      	mov	r3, r2
 800223a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	0419      	lsls	r1, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	430a      	orrs	r2, r1
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
 8002258:	e028      	b.n	80022ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4413      	add	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e00d      	b.n	800228a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3340      	adds	r3, #64	; 0x40
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	3b01      	subs	r3, #1
 8002290:	429a      	cmp	r2, r3
 8002292:	d3ec      	bcc.n	800226e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002294:	883b      	ldrh	r3, [r7, #0]
 8002296:	0418      	lsls	r0, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	3b01      	subs	r3, #1
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4302      	orrs	r2, r0
 80022a4:	3340      	adds	r3, #64	; 0x40
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e264      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d075      	beq.n	80023fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	4ba3      	ldr	r3, [pc, #652]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x108>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e23f      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x74>
 800235a:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a8a      	ldr	r2, [pc, #552]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a87      	ldr	r2, [pc, #540]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 800238c:	4b84      	ldr	r3, [pc, #528]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a83      	ldr	r2, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a80      	ldr	r2, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fb18 	bl	80009e0 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fb14 	bl	80009e0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e204      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fb04 	bl	80009e0 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fb00 	bl	80009e0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1f0      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b6c      	ldr	r3, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0xe8>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1c4      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4952      	ldr	r1, [pc, #328]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_OscConfig+0x2b0>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fab9 	bl	80009e0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fab5 	bl	80009e0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1a5      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4940      	ldr	r1, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_OscConfig+0x2b0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fa98 	bl	80009e0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe fa94 	bl	80009e0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e184      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d030      	beq.n	8002540 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_OscConfig+0x2b4>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fa78 	bl	80009e0 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fa74 	bl	80009e0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e164      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x200>
 8002512:	e015      	b.n	8002540 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x2b4>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe fa61 	bl	80009e0 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fa5d 	bl	80009e0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e14d      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a0 	beq.w	800268e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d121      	bne.n	80025ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_RCC_OscConfig+0x2b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_RCC_OscConfig+0x2b8>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe fa23 	bl	80009e0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e011      	b.n	80025c2 <HAL_RCC_OscConfig+0x2ce>
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470000 	.word	0x42470000
 80025a8:	42470e80 	.word	0x42470e80
 80025ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe fa16 	bl	80009e0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e106      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_RCC_OscConfig+0x4e4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
 80025d6:	4b81      	ldr	r3, [pc, #516]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a80      	ldr	r2, [pc, #512]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	e01c      	b.n	800261e <HAL_RCC_OscConfig+0x32a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d10c      	bne.n	8002606 <HAL_RCC_OscConfig+0x312>
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a7a      	ldr	r2, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	4b78      	ldr	r3, [pc, #480]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	e00b      	b.n	800261e <HAL_RCC_OscConfig+0x32a>
 8002606:	4b75      	ldr	r3, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a74      	ldr	r2, [pc, #464]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	4b72      	ldr	r3, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a71      	ldr	r2, [pc, #452]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d015      	beq.n	8002652 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe f9db 	bl	80009e0 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe f9d7 	bl	80009e0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0c5      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	4b65      	ldr	r3, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ee      	beq.n	800262e <HAL_RCC_OscConfig+0x33a>
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe f9c5 	bl	80009e0 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe f9c1 	bl	80009e0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0af      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4b56      	ldr	r3, [pc, #344]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a55      	ldr	r2, [pc, #340]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 809b 	beq.w	80027ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d05c      	beq.n	800275e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d141      	bne.n	8002730 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCC_OscConfig+0x4ec>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe f995 	bl	80009e0 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe f991 	bl	80009e0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e081      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	019b      	lsls	r3, r3, #6
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	3b01      	subs	r3, #1
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_RCC_OscConfig+0x4ec>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe f96a 	bl	80009e0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe f966 	bl	80009e0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e056      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x41c>
 800272e:	e04e      	b.n	80027ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_OscConfig+0x4ec>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe f953 	bl	80009e0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe f94f 	bl	80009e0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e03f      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x44a>
 800275c:	e037      	b.n	80027ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e032      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_RCC_OscConfig+0x4e8>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d028      	beq.n	80027ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d121      	bne.n	80027ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d11a      	bne.n	80027ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d111      	bne.n	80027ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40007000 	.word	0x40007000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470060 	.word	0x42470060

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe f884 	bl	80009e0 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe f880 	bl	80009e0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f821 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd ffe4 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	080066b4 	.word	0x080066b4
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	2300      	movs	r3, #0
 80029c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c8:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d00d      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x40>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	f200 80bd 	bhi.w	8002b54 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x34>
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x3a>
 80029e2:	e0b7      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029e6:	60bb      	str	r3, [r7, #8]
       break;
 80029e8:	e0b7      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ea:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029ec:	60bb      	str	r3, [r7, #8]
      break;
 80029ee:	e0b4      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f0:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fa:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04d      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a06:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	ea02 0800 	and.w	r8, r2, r0
 8002a1e:	ea03 0901 	and.w	r9, r3, r1
 8002a22:	4640      	mov	r0, r8
 8002a24:	4649      	mov	r1, r9
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	014b      	lsls	r3, r1, #5
 8002a30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a34:	0142      	lsls	r2, r0, #5
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	ebb0 0008 	subs.w	r0, r0, r8
 8002a3e:	eb61 0109 	sbc.w	r1, r1, r9
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	018b      	lsls	r3, r1, #6
 8002a4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a50:	0182      	lsls	r2, r0, #6
 8002a52:	1a12      	subs	r2, r2, r0
 8002a54:	eb63 0301 	sbc.w	r3, r3, r1
 8002a58:	f04f 0000 	mov.w	r0, #0
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	00d9      	lsls	r1, r3, #3
 8002a62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a66:	00d0      	lsls	r0, r2, #3
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	eb12 0208 	adds.w	r2, r2, r8
 8002a70:	eb43 0309 	adc.w	r3, r3, r9
 8002a74:	f04f 0000 	mov.w	r0, #0
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	0259      	lsls	r1, r3, #9
 8002a7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a82:	0250      	lsls	r0, r2, #9
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	f7fd fbaa 	bl	80001ec <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e04a      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa2:	4b31      	ldr	r3, [pc, #196]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	ea02 0400 	and.w	r4, r2, r0
 8002aba:	ea03 0501 	and.w	r5, r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	014b      	lsls	r3, r1, #5
 8002acc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ad0:	0142      	lsls	r2, r0, #5
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	1b00      	subs	r0, r0, r4
 8002ad8:	eb61 0105 	sbc.w	r1, r1, r5
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	018b      	lsls	r3, r1, #6
 8002ae6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aea:	0182      	lsls	r2, r0, #6
 8002aec:	1a12      	subs	r2, r2, r0
 8002aee:	eb63 0301 	sbc.w	r3, r3, r1
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	00d9      	lsls	r1, r3, #3
 8002afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b00:	00d0      	lsls	r0, r2, #3
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	1912      	adds	r2, r2, r4
 8002b08:	eb45 0303 	adc.w	r3, r5, r3
 8002b0c:	f04f 0000 	mov.w	r0, #0
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	0299      	lsls	r1, r3, #10
 8002b16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b1a:	0290      	lsls	r0, r2, #10
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f7fd fb5e 	bl	80001ec <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4613      	mov	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	60bb      	str	r3, [r7, #8]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b56:	60bb      	str	r3, [r7, #8]
      break;
 8002b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000

08002b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	f107 001c 	add.w	r0, r7, #28
 8002b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d122      	bne.n	8002bea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 fb1c 	bl	800421c <USB_CoreReset>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e01a      	b.n	8002c20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f001 fb10 	bl	800421c <USB_CoreReset>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
 8002c12:	e005      	b.n	8002c20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d10b      	bne.n	8002c3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f043 0206 	orr.w	r2, r3, #6
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c4a:	b004      	add	sp, #16
 8002c4c:	4770      	bx	lr
	...

08002c50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d165      	bne.n	8002d30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4a41      	ldr	r2, [pc, #260]	; (8002d6c <USB_SetTurnaroundTime+0x11c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d906      	bls.n	8002c7a <USB_SetTurnaroundTime+0x2a>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <USB_SetTurnaroundTime+0x120>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d202      	bcs.n	8002c7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c74:	230f      	movs	r3, #15
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e062      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4a3c      	ldr	r2, [pc, #240]	; (8002d70 <USB_SetTurnaroundTime+0x120>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d306      	bcc.n	8002c90 <USB_SetTurnaroundTime+0x40>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <USB_SetTurnaroundTime+0x124>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d202      	bcs.n	8002c90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c8a:	230e      	movs	r3, #14
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e057      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <USB_SetTurnaroundTime+0x124>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d306      	bcc.n	8002ca6 <USB_SetTurnaroundTime+0x56>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a37      	ldr	r2, [pc, #220]	; (8002d78 <USB_SetTurnaroundTime+0x128>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d202      	bcs.n	8002ca6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ca0:	230d      	movs	r3, #13
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e04c      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4a33      	ldr	r2, [pc, #204]	; (8002d78 <USB_SetTurnaroundTime+0x128>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d306      	bcc.n	8002cbc <USB_SetTurnaroundTime+0x6c>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a32      	ldr	r2, [pc, #200]	; (8002d7c <USB_SetTurnaroundTime+0x12c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e041      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4a2f      	ldr	r2, [pc, #188]	; (8002d7c <USB_SetTurnaroundTime+0x12c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d906      	bls.n	8002cd2 <USB_SetTurnaroundTime+0x82>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <USB_SetTurnaroundTime+0x130>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d802      	bhi.n	8002cd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ccc:	230b      	movs	r3, #11
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e036      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <USB_SetTurnaroundTime+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d906      	bls.n	8002ce8 <USB_SetTurnaroundTime+0x98>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <USB_SetTurnaroundTime+0x134>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d802      	bhi.n	8002ce8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e02b      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <USB_SetTurnaroundTime+0x134>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d906      	bls.n	8002cfe <USB_SetTurnaroundTime+0xae>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <USB_SetTurnaroundTime+0x138>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d202      	bcs.n	8002cfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002cf8:	2309      	movs	r3, #9
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e020      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <USB_SetTurnaroundTime+0x138>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d306      	bcc.n	8002d14 <USB_SetTurnaroundTime+0xc4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <USB_SetTurnaroundTime+0x13c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d0e:	2308      	movs	r3, #8
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e015      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <USB_SetTurnaroundTime+0x13c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d906      	bls.n	8002d2a <USB_SetTurnaroundTime+0xda>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <USB_SetTurnaroundTime+0x140>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d202      	bcs.n	8002d2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d24:	2307      	movs	r3, #7
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e00a      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e007      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d36:	2309      	movs	r3, #9
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e001      	b.n	8002d40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d3c:	2309      	movs	r3, #9
 8002d3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	00d8acbf 	.word	0x00d8acbf
 8002d70:	00e4e1c0 	.word	0x00e4e1c0
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	01067380 	.word	0x01067380
 8002d7c:	011a499f 	.word	0x011a499f
 8002d80:	01312cff 	.word	0x01312cff
 8002d84:	014ca43f 	.word	0x014ca43f
 8002d88:	016e3600 	.word	0x016e3600
 8002d8c:	01a6ab1f 	.word	0x01a6ab1f
 8002d90:	01e84800 	.word	0x01e84800

08002d94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d115      	bne.n	8002e26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7fd fdf6 	bl	80009f8 <HAL_Delay>
      ms++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f001 f972 	bl	80040fc <USB_GetMode>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d01e      	beq.n	8002e5c <USB_SetCurrentMode+0x84>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b31      	cmp	r3, #49	; 0x31
 8002e22:	d9f0      	bls.n	8002e06 <USB_SetCurrentMode+0x2e>
 8002e24:	e01a      	b.n	8002e5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d115      	bne.n	8002e58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7fd fddd 	bl	80009f8 <HAL_Delay>
      ms++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f001 f959 	bl	80040fc <USB_GetMode>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <USB_SetCurrentMode+0x84>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b31      	cmp	r3, #49	; 0x31
 8002e54:	d9f0      	bls.n	8002e38 <USB_SetCurrentMode+0x60>
 8002e56:	e001      	b.n	8002e5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e005      	b.n	8002e68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b32      	cmp	r3, #50	; 0x32
 8002e60:	d101      	bne.n	8002e66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e70:	b084      	sub	sp, #16
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	e009      	b.n	8002ea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	3340      	adds	r3, #64	; 0x40
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b0e      	cmp	r3, #14
 8002ea8:	d9f2      	bls.n	8002e90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11c      	bne.n	8002eea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ee8:	e00b      	b.n	8002f02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f14:	4619      	mov	r1, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	680b      	ldr	r3, [r1, #0]
 8002f20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10c      	bne.n	8002f42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f2e:	2100      	movs	r1, #0
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f945 	bl	80031c0 <USB_SetDevSpeed>
 8002f36:	e008      	b.n	8002f4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f38:	2101      	movs	r1, #1
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f940 	bl	80031c0 <USB_SetDevSpeed>
 8002f40:	e003      	b.n	8002f4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f42:	2103      	movs	r1, #3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f93b 	bl	80031c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8f3 	bl	8003138 <USB_FlushTxFifo>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f90f 	bl	8003180 <USB_FlushRxFifo>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f72:	461a      	mov	r2, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e043      	b.n	800301e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fac:	d118      	bne.n	8002fe0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e013      	b.n	8002ff2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e008      	b.n	8002ff2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	461a      	mov	r2, r3
 8003000:	2300      	movs	r3, #0
 8003002:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3301      	adds	r3, #1
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	429a      	cmp	r2, r3
 8003024:	d3b7      	bcc.n	8002f96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e043      	b.n	80030b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800303e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003042:	d118      	bne.n	8003076 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e013      	b.n	8003088 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e008      	b.n	8003088 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	461a      	mov	r2, r3
 80030a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	3301      	adds	r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3b7      	bcc.n	800302c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f043 0210 	orr.w	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <USB_DevInit+0x2c4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f043 0208 	orr.w	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003130:	b004      	add	sp, #16
 8003132:	4770      	bx	lr
 8003134:	803c3800 	.word	0x803c3800

08003138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	4a08      	ldr	r2, [pc, #32]	; (800317c <USB_FlushTxFifo+0x44>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e006      	b.n	8003170 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b20      	cmp	r3, #32
 800316c:	d0f1      	beq.n	8003152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	00030d40 	.word	0x00030d40

08003180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2210      	movs	r2, #16
 8003190:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3301      	adds	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <USB_FlushRxFifo+0x3c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e006      	b.n	80031b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d0f1      	beq.n	8003192 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	00030d40 	.word	0x00030d40

080031c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0306 	and.w	r3, r3, #6
 800320a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
 8003216:	e00a      	b.n	800322e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d002      	beq.n	8003224 <USB_GetDevSpeed+0x32>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d102      	bne.n	800322a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003224:	2302      	movs	r3, #2
 8003226:	75fb      	strb	r3, [r7, #23]
 8003228:	e001      	b.n	800322e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800322a:	230f      	movs	r3, #15
 800322c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003230:	4618      	mov	r0, r3
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d13a      	bne.n	80032ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003276:	4313      	orrs	r3, r2
 8003278:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d155      	bne.n	800333c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	78db      	ldrb	r3, [r3, #3]
 80032aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	059b      	lsls	r3, r3, #22
 80032b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	0151      	lsls	r1, r2, #5
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	440a      	add	r2, r1
 80032be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e036      	b.n	800333c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	2101      	movs	r1, #1
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11a      	bne.n	800333c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	78db      	ldrb	r3, [r3, #3]
 8003320:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003322:	430b      	orrs	r3, r1
 8003324:	4313      	orrs	r3, r2
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	0151      	lsls	r1, r2, #5
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	440a      	add	r2, r1
 800332e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d161      	bne.n	800342c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800337a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800337e:	d11f      	bne.n	80033c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	440a      	add	r2, r1
 8003396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800339a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800339e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	0151      	lsls	r1, r2, #5
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	440a      	add	r2, r1
 80033b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e0:	4013      	ands	r3, r2
 80033e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003404:	4013      	ands	r3, r2
 8003406:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	0159      	lsls	r1, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	440b      	add	r3, r1
 800341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003422:	4619      	mov	r1, r3
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <USB_DeactivateEndpoint+0x1b0>)
 8003426:	4013      	ands	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
 800342a:	e060      	b.n	80034ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800343e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003442:	d11f      	bne.n	8003484 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	440a      	add	r2, r1
 800345a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800345e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003462:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	0151      	lsls	r1, r2, #5
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	440a      	add	r2, r1
 800347a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800347e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	43db      	mvns	r3, r3
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a4:	4013      	ands	r3, r2
 80034a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	43db      	mvns	r3, r3
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c8:	4013      	ands	r3, r2
 80034ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	0159      	lsls	r1, r3, #5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	4619      	mov	r1, r3
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <USB_DeactivateEndpoint+0x1b4>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	ec337800 	.word	0xec337800
 8003500:	eff37800 	.word	0xeff37800

08003504 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 815c 	bne.w	80037de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d132      	bne.n	8003594 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	440a      	add	r2, r1
 8003544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800354c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	440a      	add	r2, r1
 8003568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	0151      	lsls	r1, r2, #5
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	440a      	add	r2, r1
 8003588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800358c:	0cdb      	lsrs	r3, r3, #19
 800358e:	04db      	lsls	r3, r3, #19
 8003590:	6113      	str	r3, [r2, #16]
 8003592:	e074      	b.n	800367e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	0151      	lsls	r1, r2, #5
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	440a      	add	r2, r1
 80035aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ae:	0cdb      	lsrs	r3, r3, #19
 80035b0:	04db      	lsls	r3, r3, #19
 80035b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6959      	ldr	r1, [r3, #20]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	440b      	add	r3, r1
 80035f0:	1e59      	subs	r1, r3, #1
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035fc:	4b9d      	ldr	r3, [pc, #628]	; (8003874 <USB_EPStartXfer+0x370>)
 80035fe:	400b      	ands	r3, r1
 8003600:	69b9      	ldr	r1, [r7, #24]
 8003602:	0148      	lsls	r0, r1, #5
 8003604:	69f9      	ldr	r1, [r7, #28]
 8003606:	4401      	add	r1, r0
 8003608:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800360c:	4313      	orrs	r3, r2
 800360e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	0148      	lsls	r0, r1, #5
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	4401      	add	r1, r0
 800362e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003632:	4313      	orrs	r3, r2
 8003634:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	78db      	ldrb	r3, [r3, #3]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d11f      	bne.n	800367e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	0151      	lsls	r1, r2, #5
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	440a      	add	r2, r1
 8003654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003658:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800365c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	0151      	lsls	r1, r2, #5
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	440a      	add	r2, r1
 8003674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800367c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d14b      	bne.n	800371c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	78db      	ldrb	r3, [r3, #3]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d128      	bne.n	80036fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d110      	bne.n	80036da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	e00f      	b.n	80036fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e12f      	b.n	800397c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800373a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	78db      	ldrb	r3, [r3, #3]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d015      	beq.n	8003770 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8117 	beq.w	800397c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800376a:	4313      	orrs	r3, r2
 800376c:	634b      	str	r3, [r1, #52]	; 0x34
 800376e:	e105      	b.n	800397c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d110      	bne.n	80037a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	440a      	add	r2, r1
 8003796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e00f      	b.n	80037c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	68d9      	ldr	r1, [r3, #12]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	b298      	uxth	r0, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	4603      	mov	r3, r0
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fa2b 	bl	8003c32 <USB_WritePacket>
 80037dc:	e0ce      	b.n	800397c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f8:	0cdb      	lsrs	r3, r3, #19
 80037fa:	04db      	lsls	r3, r3, #19
 80037fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	440a      	add	r2, r1
 8003814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800381c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003820:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d126      	bne.n	8003878 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	0148      	lsls	r0, r1, #5
 8003844:	69f9      	ldr	r1, [r7, #28]
 8003846:	4401      	add	r1, r0
 8003848:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800384c:	4313      	orrs	r3, r2
 800384e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800386e:	6113      	str	r3, [r2, #16]
 8003870:	e036      	b.n	80038e0 <USB_EPStartXfer+0x3dc>
 8003872:	bf00      	nop
 8003874:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4413      	add	r3, r2
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	8afb      	ldrh	r3, [r7, #22]
 800389e:	04d9      	lsls	r1, r3, #19
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <USB_EPStartXfer+0x484>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	0148      	lsls	r0, r1, #5
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	4401      	add	r1, r0
 80038ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	8af9      	ldrh	r1, [r7, #22]
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	0148      	lsls	r0, r1, #5
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	4401      	add	r1, r0
 80038d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10d      	bne.n	8003902 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	460a      	mov	r2, r1
 8003900:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d128      	bne.n	800395c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d110      	bne.n	800393c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00f      	b.n	800395c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	440a      	add	r2, r1
 8003952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	440a      	add	r2, r1
 8003972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800397a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	1ff80000 	.word	0x1ff80000

0800398c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 80cd 	bne.w	8003b48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d132      	bne.n	8003a1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	0151      	lsls	r1, r2, #5
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	440a      	add	r2, r1
 80039cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a14:	0cdb      	lsrs	r3, r3, #19
 8003a16:	04db      	lsls	r3, r3, #19
 8003a18:	6113      	str	r3, [r2, #16]
 8003a1a:	e04e      	b.n	8003aba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a36:	0cdb      	lsrs	r3, r3, #19
 8003a38:	04db      	lsls	r3, r3, #19
 8003a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d903      	bls.n	8003a74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	6939      	ldr	r1, [r7, #16]
 8003aac:	0148      	lsls	r0, r1, #5
 8003aae:	6979      	ldr	r1, [r7, #20]
 8003ab0:	4401      	add	r1, r0
 8003ab2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d11e      	bne.n	8003afe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	e092      	b.n	8003c24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d07e      	beq.n	8003c24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b42:	4313      	orrs	r3, r2
 8003b44:	634b      	str	r3, [r1, #52]	; 0x34
 8003b46:	e06d      	b.n	8003c24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b62:	0cdb      	lsrs	r3, r3, #19
 8003b64:	04db      	lsls	r3, r3, #19
 8003b66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd2:	6939      	ldr	r1, [r7, #16]
 8003bd4:	0148      	lsls	r0, r1, #5
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	4401      	add	r1, r0
 8003bda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bde:	4313      	orrs	r3, r2
 8003be0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10d      	bne.n	8003c04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	68d9      	ldr	r1, [r3, #12]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	460a      	mov	r2, r1
 8003c02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b089      	sub	sp, #36	; 0x24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	460b      	mov	r3, r1
 8003c42:	71fb      	strb	r3, [r7, #7]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d123      	bne.n	8003ca0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c58:	88bb      	ldrh	r3, [r7, #4]
 8003c5a:	3303      	adds	r3, #3
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e018      	b.n	8003c98 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	031a      	lsls	r2, r3, #12
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c72:	461a      	mov	r2, r3
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	3301      	adds	r3, #1
 8003c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d3e2      	bcc.n	8003c66 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3724      	adds	r7, #36	; 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b08b      	sub	sp, #44	; 0x2c
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	e014      	b.n	8003d04 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	3301      	adds	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	3301      	adds	r3, #1
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3e6      	bcc.n	8003cda <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d0c:	8bfb      	ldrh	r3, [r7, #30]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01e      	beq.n	8003d50 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f107 0310 	add.w	r3, r7, #16
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	701a      	strb	r2, [r3, #0]
      i++;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d44:	8bfb      	ldrh	r3, [r7, #30]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d4a:	8bfb      	ldrh	r3, [r7, #30]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ea      	bne.n	8003d26 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	372c      	adds	r7, #44	; 0x2c
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12c      	bne.n	8003dd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db12      	blt.n	8003db2 <USB_EPSetStall+0x54>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00f      	beq.n	8003db2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	0151      	lsls	r1, r2, #5
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	440a      	add	r2, r1
 8003da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e02b      	b.n	8003e2c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db12      	blt.n	8003e0c <USB_EPSetStall+0xae>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00f      	beq.n	8003e0c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e0a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d128      	bne.n	8003ea8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	78db      	ldrb	r3, [r3, #3]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d003      	beq.n	8003e86 <USB_EPClearStall+0x4c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	78db      	ldrb	r3, [r3, #3]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d138      	bne.n	8003ef8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e027      	b.n	8003ef8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ec6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	78db      	ldrb	r3, [r3, #3]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d003      	beq.n	8003ed8 <USB_EPClearStall+0x9e>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	78db      	ldrb	r3, [r3, #3]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d10f      	bne.n	8003ef8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f28:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f6c:	f023 0303 	bic.w	r3, r3, #3
 8003f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f023 0302 	bic.w	r3, r3, #2
 8003f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	0c1b      	lsrs	r3, r3, #16
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	b29b      	uxth	r3, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004092:	68bb      	ldr	r3, [r7, #8]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	01db      	lsls	r3, r3, #7
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040ee:	68bb      	ldr	r3, [r7, #8]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f003 0301 	and.w	r3, r3, #1
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004132:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	460b      	mov	r3, r1
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	333c      	adds	r3, #60	; 0x3c
 8004176:	3304      	adds	r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4a26      	ldr	r2, [pc, #152]	; (8004218 <USB_EP0_OutStart+0xb8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d90a      	bls.n	800419a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004194:	d101      	bne.n	800419a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e037      	b.n	800420a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	461a      	mov	r2, r3
 80041a2:	2300      	movs	r3, #0
 80041a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c8:	f043 0318 	orr.w	r3, r3, #24
 80041cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80041e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80041e2:	7afb      	ldrb	r3, [r7, #11]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10f      	bne.n	8004208 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004202:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004206:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	4f54300a 	.word	0x4f54300a

0800421c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <USB_CoreReset+0x60>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e01a      	b.n	800426e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	daf3      	bge.n	8004228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <USB_CoreReset+0x60>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d0f1      	beq.n	8004250 <USB_CoreReset+0x34>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	00030d40 	.word	0x00030d40

08004280 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800428c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004290:	f002 f970 	bl	8006574 <USBD_static_malloc>
 8004294:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80042a4:	2302      	movs	r3, #2
 80042a6:	e066      	b.n	8004376 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7c1b      	ldrb	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d119      	bne.n	80042ec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042bc:	2202      	movs	r2, #2
 80042be:	2181      	movs	r1, #129	; 0x81
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f002 f834 	bl	800632e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042d0:	2202      	movs	r2, #2
 80042d2:	2101      	movs	r1, #1
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f002 f82a 	bl	800632e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2210      	movs	r2, #16
 80042e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80042ea:	e016      	b.n	800431a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	2202      	movs	r2, #2
 80042f0:	2181      	movs	r1, #129	; 0x81
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f002 f81b 	bl	800632e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	2202      	movs	r2, #2
 8004302:	2101      	movs	r1, #1
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f002 f812 	bl	800632e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2210      	movs	r2, #16
 8004316:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800431a:	2308      	movs	r3, #8
 800431c:	2203      	movs	r2, #3
 800431e:	2182      	movs	r1, #130	; 0x82
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f002 f804 	bl	800632e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7c1b      	ldrb	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800435a:	2101      	movs	r1, #1
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f002 f8d5 	bl	800650c <USBD_LL_PrepareReceive>
 8004362:	e007      	b.n	8004374 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800436a:	2340      	movs	r3, #64	; 0x40
 800436c:	2101      	movs	r1, #1
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f002 f8cc 	bl	800650c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800438a:	2181      	movs	r1, #129	; 0x81
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f001 fff4 	bl	800637a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004398:	2101      	movs	r1, #1
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 ffed 	bl	800637a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80043a8:	2182      	movs	r1, #130	; 0x82
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f001 ffe5 	bl	800637a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043da:	4618      	mov	r0, r3
 80043dc:	f002 f8d8 	bl	8006590 <USBD_static_free>
    pdev->pClassData = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004404:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004418:	2303      	movs	r3, #3
 800441a:	e0af      	b.n	800457c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03f      	beq.n	80044a8 <USBD_CDC_Setup+0xb4>
 8004428:	2b20      	cmp	r3, #32
 800442a:	f040 809f 	bne.w	800456c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	88db      	ldrh	r3, [r3, #6]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02e      	beq.n	8004494 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b25b      	sxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	da16      	bge.n	800446e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800444c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	88d2      	ldrh	r2, [r2, #6]
 8004452:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	88db      	ldrh	r3, [r3, #6]
 8004458:	2b07      	cmp	r3, #7
 800445a:	bf28      	it	cs
 800445c:	2307      	movcs	r3, #7
 800445e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	89fa      	ldrh	r2, [r7, #14]
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 fb19 	bl	8005a9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800446c:	e085      	b.n	800457a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	785a      	ldrb	r2, [r3, #1]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	88db      	ldrh	r3, [r3, #6]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004484:	6939      	ldr	r1, [r7, #16]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	88db      	ldrh	r3, [r3, #6]
 800448a:	461a      	mov	r2, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 fb32 	bl	8005af6 <USBD_CtlPrepareRx>
      break;
 8004492:	e072      	b.n	800457a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	7850      	ldrb	r0, [r2, #1]
 80044a0:	2200      	movs	r2, #0
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	4798      	blx	r3
      break;
 80044a6:	e068      	b.n	800457a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	2b0b      	cmp	r3, #11
 80044ae:	d852      	bhi.n	8004556 <USBD_CDC_Setup+0x162>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <USBD_CDC_Setup+0xc4>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044e9 	.word	0x080044e9
 80044bc:	08004565 	.word	0x08004565
 80044c0:	08004557 	.word	0x08004557
 80044c4:	08004557 	.word	0x08004557
 80044c8:	08004557 	.word	0x08004557
 80044cc:	08004557 	.word	0x08004557
 80044d0:	08004557 	.word	0x08004557
 80044d4:	08004557 	.word	0x08004557
 80044d8:	08004557 	.word	0x08004557
 80044dc:	08004557 	.word	0x08004557
 80044e0:	08004513 	.word	0x08004513
 80044e4:	0800453d 	.word	0x0800453d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d107      	bne.n	8004504 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80044f4:	f107 030a 	add.w	r3, r7, #10
 80044f8:	2202      	movs	r2, #2
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 face 	bl	8005a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004502:	e032      	b.n	800456a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004504:	6839      	ldr	r1, [r7, #0]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f001 fa58 	bl	80059bc <USBD_CtlError>
            ret = USBD_FAIL;
 800450c:	2303      	movs	r3, #3
 800450e:	75fb      	strb	r3, [r7, #23]
          break;
 8004510:	e02b      	b.n	800456a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b03      	cmp	r3, #3
 800451c:	d107      	bne.n	800452e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800451e:	f107 030d 	add.w	r3, r7, #13
 8004522:	2201      	movs	r2, #1
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 fab9 	bl	8005a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800452c:	e01d      	b.n	800456a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f001 fa43 	bl	80059bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004536:	2303      	movs	r3, #3
 8004538:	75fb      	strb	r3, [r7, #23]
          break;
 800453a:	e016      	b.n	800456a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b03      	cmp	r3, #3
 8004546:	d00f      	beq.n	8004568 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fa36 	bl	80059bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004550:	2303      	movs	r3, #3
 8004552:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004554:	e008      	b.n	8004568 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f001 fa2f 	bl	80059bc <USBD_CtlError>
          ret = USBD_FAIL;
 800455e:	2303      	movs	r3, #3
 8004560:	75fb      	strb	r3, [r7, #23]
          break;
 8004562:	e002      	b.n	800456a <USBD_CDC_Setup+0x176>
          break;
 8004564:	bf00      	nop
 8004566:	e008      	b.n	800457a <USBD_CDC_Setup+0x186>
          break;
 8004568:	bf00      	nop
      }
      break;
 800456a:	e006      	b.n	800457a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fa24 	bl	80059bc <USBD_CtlError>
      ret = USBD_FAIL;
 8004574:	2303      	movs	r3, #3
 8004576:	75fb      	strb	r3, [r7, #23]
      break;
 8004578:	bf00      	nop
  }

  return (uint8_t)ret;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004596:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e04f      	b.n	8004646 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	3318      	adds	r3, #24
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d029      	beq.n	8004618 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3318      	adds	r3, #24
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	78f9      	ldrb	r1, [r7, #3]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	460b      	mov	r3, r1
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	1a5b      	subs	r3, r3, r1
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4403      	add	r3, r0
 80045e4:	3344      	adds	r3, #68	; 0x44
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80045ec:	fb03 f301 	mul.w	r3, r3, r1
 80045f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d110      	bne.n	8004618 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3318      	adds	r3, #24
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800460a:	78f9      	ldrb	r1, [r7, #3]
 800460c:	2300      	movs	r3, #0
 800460e:	2200      	movs	r2, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 ff5a 	bl	80064ca <USBD_LL_Transmit>
 8004616:	e015      	b.n	8004644 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004660:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800466c:	2303      	movs	r3, #3
 800466e:	e015      	b.n	800469c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 ff6a 	bl	800654e <USBD_LL_GetRxDataSize>
 800467a:	4602      	mov	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004696:	4611      	mov	r1, r2
 8004698:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e01b      	b.n	80046f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d015      	beq.n	80046f4 <USBD_CDC_EP0_RxReady+0x50>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046ce:	2bff      	cmp	r3, #255	; 0xff
 80046d0:	d010      	beq.n	80046f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80046e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046e8:	b292      	uxth	r2, r2
 80046ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2243      	movs	r2, #67	; 0x43
 800470c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800470e:	4b03      	ldr	r3, [pc, #12]	; (800471c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000094 	.word	0x20000094

08004720 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2243      	movs	r2, #67	; 0x43
 800472c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000050 	.word	0x20000050

08004740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2243      	movs	r2, #67	; 0x43
 800474c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800474e:	4b03      	ldr	r3, [pc, #12]	; (800475c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	200000d8 	.word	0x200000d8

08004760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	220a      	movs	r2, #10
 800476c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800476e:	4b03      	ldr	r3, [pc, #12]	; (800477c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	2000000c 	.word	0x2000000c

08004780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004790:	2303      	movs	r3, #3
 8004792:	e004      	b.n	800479e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b087      	sub	sp, #28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e008      	b.n	80047da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80047fe:	2303      	movs	r3, #3
 8004800:	e004      	b.n	800480c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004826:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004836:	2303      	movs	r3, #3
 8004838:	e01a      	b.n	8004870 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004840:	2b00      	cmp	r3, #0
 8004842:	d114      	bne.n	800486e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2201      	movs	r2, #1
 8004848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004862:	2181      	movs	r1, #129	; 0x81
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f001 fe30 	bl	80064ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004886:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004892:	2303      	movs	r3, #3
 8004894:	e016      	b.n	80048c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7c1b      	ldrb	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a8:	2101      	movs	r1, #1
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 fe2e 	bl	800650c <USBD_LL_PrepareReceive>
 80048b0:	e007      	b.n	80048c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048b8:	2340      	movs	r3, #64	; 0x40
 80048ba:	2101      	movs	r1, #1
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fe25 	bl	800650c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e01f      	b.n	8004924 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	79fa      	ldrb	r2, [r7, #7]
 8004916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f001 fca1 	bl	8006260 <USBD_LL_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004940:	2303      	movs	r3, #3
 8004942:	e016      	b.n	8004972 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f107 020e 	add.w	r2, r7, #14
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 fcb8 	bl	80062f8 <USBD_LL_Start>
 8004988:	4603      	mov	r3, r0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80049b4:	2303      	movs	r3, #3
 80049b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	4611      	mov	r1, r2
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	4611      	mov	r1, r2
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
  }

  return USBD_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 ff90 	bl	8005948 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d01a      	beq.n	8004a82 <USBD_LL_SetupStage+0x72>
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d822      	bhi.n	8004a96 <USBD_LL_SetupStage+0x86>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <USBD_LL_SetupStage+0x4a>
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d00a      	beq.n	8004a6e <USBD_LL_SetupStage+0x5e>
 8004a58:	e01d      	b.n	8004a96 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa62 	bl	8004f2c <USBD_StdDevReq>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e020      	b.n	8004ab0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fac6 	bl	8005008 <USBD_StdItfReq>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a80:	e016      	b.n	8004ab0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fb05 	bl	800509a <USBD_StdEPReq>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e00c      	b.n	8004ab0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f001 fc87 	bl	80063b8 <USBD_LL_StallEP>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	73fb      	strb	r3, [r7, #15]
      break;
 8004aae:	bf00      	nop
  }

  return ret;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004ac8:	7afb      	ldrb	r3, [r7, #11]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d138      	bne.n	8004b40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ad4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d14a      	bne.n	8004b76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d913      	bls.n	8004b14 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	4293      	cmp	r3, r2
 8004b04:	bf28      	it	cs
 8004b06:	4613      	movcs	r3, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f001 f80f 	bl	8005b30 <USBD_CtlContinueRx>
 8004b12:	e030      	b.n	8004b76 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d10b      	bne.n	8004b38 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f001 f80a 	bl	8005b52 <USBD_CtlSendStatus>
 8004b3e:	e01a      	b.n	8004b76 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d114      	bne.n	8004b76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	7afa      	ldrb	r2, [r7, #11]
 8004b62:	4611      	mov	r1, r2
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	4798      	blx	r3
 8004b68:	4603      	mov	r3, r0
 8004b6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	e000      	b.n	8004b78 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d16b      	bne.n	8004c6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3314      	adds	r3, #20
 8004b98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d156      	bne.n	8004c52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d914      	bls.n	8004bda <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	1ad2      	subs	r2, r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 ff84 	bl	8005ad4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f001 fc9a 	bl	800650c <USBD_LL_PrepareReceive>
 8004bd8:	e03b      	b.n	8004c52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d11c      	bne.n	8004c20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d316      	bcc.n	8004c20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d20f      	bcs.n	8004c20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c00:	2200      	movs	r2, #0
 8004c02:	2100      	movs	r1, #0
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 ff65 	bl	8005ad4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c12:	2300      	movs	r3, #0
 8004c14:	2200      	movs	r2, #0
 8004c16:	2100      	movs	r1, #0
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f001 fc77 	bl	800650c <USBD_LL_PrepareReceive>
 8004c1e:	e018      	b.n	8004c52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d10b      	bne.n	8004c44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f001 fbb6 	bl	80063b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 ff93 	bl	8005b78 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d122      	bne.n	8004ca2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff fe98 	bl	8004992 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c6a:	e01a      	b.n	8004ca2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d114      	bne.n	8004ca2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00e      	beq.n	8004ca2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	7afa      	ldrb	r2, [r7, #11]
 8004c8e:	4611      	mov	r1, r2
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	4798      	blx	r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	e000      	b.n	8004ca4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e02f      	b.n	8004d40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00f      	beq.n	8004d0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6852      	ldr	r2, [r2, #4]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	4611      	mov	r1, r2
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 fb0c 	bl	800632e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2240      	movs	r2, #64	; 0x40
 8004d22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d26:	2340      	movs	r3, #64	; 0x40
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 fafe 	bl	800632e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d106      	bne.n	8004db6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e012      	b.n	8004e00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d10b      	bne.n	8004dfe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e014      	b.n	8004e4c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d10d      	bne.n	8004e4a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	4611      	mov	r1, r2
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e014      	b.n	8004e98 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d10d      	bne.n	8004e96 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	4611      	mov	r1, r2
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6852      	ldr	r2, [r2, #4]
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	4611      	mov	r1, r2
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
  }

  return USBD_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3301      	adds	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004f0c:	8a3b      	ldrh	r3, [r7, #16]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	b21a      	sxth	r2, r3
 8004f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	b21b      	sxth	r3, r3
 8004f1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d005      	beq.n	8004f52 <USBD_StdDevReq+0x26>
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d853      	bhi.n	8004ff2 <USBD_StdDevReq+0xc6>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <USBD_StdDevReq+0x3a>
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d14f      	bne.n	8004ff2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
 8004f60:	4603      	mov	r3, r0
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e04a      	b.n	8004ffc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d83b      	bhi.n	8004fe6 <USBD_StdDevReq+0xba>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <USBD_StdDevReq+0x48>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004fdd 	.word	0x08004fdd
 8004f7c:	08004fe7 	.word	0x08004fe7
 8004f80:	08004fd3 	.word	0x08004fd3
 8004f84:	08004fe7 	.word	0x08004fe7
 8004f88:	08004fa7 	.word	0x08004fa7
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fe7 	.word	0x08004fe7
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fb1 	.word	0x08004fb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9de 	bl	8005360 <USBD_GetDescriptor>
          break;
 8004fa4:	e024      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fb43 	bl	8005634 <USBD_SetAddress>
          break;
 8004fae:	e01f      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fb82 	bl	80056bc <USBD_SetConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
          break;
 8004fbc:	e018      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fc21 	bl	8005808 <USBD_GetConfig>
          break;
 8004fc6:	e013      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fc52 	bl	8005874 <USBD_GetStatus>
          break;
 8004fd0:	e00e      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fc81 	bl	80058dc <USBD_SetFeature>
          break;
 8004fda:	e009      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fc90 	bl	8005904 <USBD_ClrFeature>
          break;
 8004fe4:	e004      	b.n	8004ff0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fce7 	bl	80059bc <USBD_CtlError>
          break;
 8004fee:	bf00      	nop
      }
      break;
 8004ff0:	e004      	b.n	8004ffc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fce1 	bl	80059bc <USBD_CtlError>
      break;
 8004ffa:	bf00      	nop
  }

  return ret;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop

08005008 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d005      	beq.n	800502e <USBD_StdItfReq+0x26>
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d82f      	bhi.n	8005086 <USBD_StdItfReq+0x7e>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <USBD_StdItfReq+0x26>
 800502a:	2b20      	cmp	r3, #32
 800502c:	d12b      	bne.n	8005086 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	2b02      	cmp	r3, #2
 800503a:	d81d      	bhi.n	8005078 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	889b      	ldrh	r3, [r3, #4]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d813      	bhi.n	800506e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	88db      	ldrh	r3, [r3, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d110      	bne.n	8005082 <USBD_StdItfReq+0x7a>
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fd73 	bl	8005b52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800506c:	e009      	b.n	8005082 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fca3 	bl	80059bc <USBD_CtlError>
          break;
 8005076:	e004      	b.n	8005082 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fc9e 	bl	80059bc <USBD_CtlError>
          break;
 8005080:	e000      	b.n	8005084 <USBD_StdItfReq+0x7c>
          break;
 8005082:	bf00      	nop
      }
      break;
 8005084:	e004      	b.n	8005090 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fc97 	bl	80059bc <USBD_CtlError>
      break;
 800508e:	bf00      	nop
  }

  return ret;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	889b      	ldrh	r3, [r3, #4]
 80050ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d007      	beq.n	80050ca <USBD_StdEPReq+0x30>
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	f200 8145 	bhi.w	800534a <USBD_StdEPReq+0x2b0>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <USBD_StdEPReq+0x44>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	f040 8140 	bne.w	800534a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	4798      	blx	r3
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e13a      	b.n	8005354 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d007      	beq.n	80050f6 <USBD_StdEPReq+0x5c>
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	f300 8129 	bgt.w	800533e <USBD_StdEPReq+0x2a4>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d07f      	beq.n	80051f0 <USBD_StdEPReq+0x156>
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d03c      	beq.n	800516e <USBD_StdEPReq+0xd4>
 80050f4:	e123      	b.n	800533e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d002      	beq.n	8005108 <USBD_StdEPReq+0x6e>
 8005102:	2b03      	cmp	r3, #3
 8005104:	d016      	beq.n	8005134 <USBD_StdEPReq+0x9a>
 8005106:	e02c      	b.n	8005162 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <USBD_StdEPReq+0x90>
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d00a      	beq.n	800512a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f001 f94d 	bl	80063b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f001 f949 	bl	80063b8 <USBD_LL_StallEP>
 8005126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005128:	e020      	b.n	800516c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fc45 	bl	80059bc <USBD_CtlError>
              break;
 8005132:	e01b      	b.n	800516c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	885b      	ldrh	r3, [r3, #2]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10e      	bne.n	800515a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <USBD_StdEPReq+0xc0>
 8005142:	7bbb      	ldrb	r3, [r7, #14]
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d008      	beq.n	800515a <USBD_StdEPReq+0xc0>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	88db      	ldrh	r3, [r3, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005150:	7bbb      	ldrb	r3, [r7, #14]
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 f92f 	bl	80063b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fcf9 	bl	8005b52 <USBD_CtlSendStatus>

              break;
 8005160:	e004      	b.n	800516c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fc29 	bl	80059bc <USBD_CtlError>
              break;
 800516a:	bf00      	nop
          }
          break;
 800516c:	e0ec      	b.n	8005348 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d002      	beq.n	8005180 <USBD_StdEPReq+0xe6>
 800517a:	2b03      	cmp	r3, #3
 800517c:	d016      	beq.n	80051ac <USBD_StdEPReq+0x112>
 800517e:	e030      	b.n	80051e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <USBD_StdEPReq+0x108>
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d00a      	beq.n	80051a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f911 	bl	80063b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005196:	2180      	movs	r1, #128	; 0x80
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f90d 	bl	80063b8 <USBD_LL_StallEP>
 800519e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051a0:	e025      	b.n	80051ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fc09 	bl	80059bc <USBD_CtlError>
              break;
 80051aa:	e020      	b.n	80051ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	885b      	ldrh	r3, [r3, #2]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11b      	bne.n	80051ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80051be:	7bbb      	ldrb	r3, [r7, #14]
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f917 	bl	80063f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fcc2 	bl	8005b52 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80051e0:	e004      	b.n	80051ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fbe9 	bl	80059bc <USBD_CtlError>
              break;
 80051ea:	e000      	b.n	80051ee <USBD_StdEPReq+0x154>
              break;
 80051ec:	bf00      	nop
          }
          break;
 80051ee:	e0ab      	b.n	8005348 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d002      	beq.n	8005202 <USBD_StdEPReq+0x168>
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d032      	beq.n	8005266 <USBD_StdEPReq+0x1cc>
 8005200:	e097      	b.n	8005332 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <USBD_StdEPReq+0x17e>
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	d004      	beq.n	8005218 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fbd3 	bl	80059bc <USBD_CtlError>
                break;
 8005216:	e091      	b.n	800533c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0b      	bge.n	8005238 <USBD_StdEPReq+0x19e>
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	3310      	adds	r3, #16
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	3304      	adds	r3, #4
 8005236:	e00b      	b.n	8005250 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	3304      	adds	r3, #4
 8005250:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2202      	movs	r2, #2
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fc1d 	bl	8005a9e <USBD_CtlSendData>
              break;
 8005264:	e06a      	b.n	800533c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800526a:	2b00      	cmp	r3, #0
 800526c:	da11      	bge.n	8005292 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d117      	bne.n	80052b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb96 	bl	80059bc <USBD_CtlError>
                  break;
 8005290:	e054      	b.n	800533c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	f003 020f 	and.w	r2, r3, #15
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fb83 	bl	80059bc <USBD_CtlError>
                  break;
 80052b6:	e041      	b.n	800533c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da0b      	bge.n	80052d8 <USBD_StdEPReq+0x23e>
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3310      	adds	r3, #16
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	e00b      	b.n	80052f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	3304      	adds	r3, #4
 80052f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052f2:	7bbb      	ldrb	r3, [r7, #14]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <USBD_StdEPReq+0x264>
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d103      	bne.n	8005306 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e00e      	b.n	8005324 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 f892 	bl	8006434 <USBD_LL_IsStallEP>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e002      	b.n	8005324 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2202      	movs	r2, #2
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fbb7 	bl	8005a9e <USBD_CtlSendData>
              break;
 8005330:	e004      	b.n	800533c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fb41 	bl	80059bc <USBD_CtlError>
              break;
 800533a:	bf00      	nop
          }
          break;
 800533c:	e004      	b.n	8005348 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fb3b 	bl	80059bc <USBD_CtlError>
          break;
 8005346:	bf00      	nop
      }
      break;
 8005348:	e004      	b.n	8005354 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fb35 	bl	80059bc <USBD_CtlError>
      break;
 8005352:	bf00      	nop
  }

  return ret;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	2b06      	cmp	r3, #6
 8005382:	f200 8128 	bhi.w	80055d6 <USBD_GetDescriptor+0x276>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <USBD_GetDescriptor+0x2c>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a9 	.word	0x080053a9
 8005390:	080053c1 	.word	0x080053c1
 8005394:	08005401 	.word	0x08005401
 8005398:	080055d7 	.word	0x080055d7
 800539c:	080055d7 	.word	0x080055d7
 80053a0:	08005577 	.word	0x08005577
 80053a4:	080055a3 	.word	0x080055a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	7c12      	ldrb	r2, [r2, #16]
 80053b4:	f107 0108 	add.w	r1, r7, #8
 80053b8:	4610      	mov	r0, r2
 80053ba:	4798      	blx	r3
 80053bc:	60f8      	str	r0, [r7, #12]
      break;
 80053be:	e112      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7c1b      	ldrb	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f107 0208 	add.w	r2, r7, #8
 80053d4:	4610      	mov	r0, r2
 80053d6:	4798      	blx	r3
 80053d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	2202      	movs	r2, #2
 80053e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80053e2:	e100      	b.n	80055e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	f107 0208 	add.w	r2, r7, #8
 80053f0:	4610      	mov	r0, r2
 80053f2:	4798      	blx	r3
 80053f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	2202      	movs	r2, #2
 80053fc:	701a      	strb	r2, [r3, #0]
      break;
 80053fe:	e0f2      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	885b      	ldrh	r3, [r3, #2]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b05      	cmp	r3, #5
 8005408:	f200 80ac 	bhi.w	8005564 <USBD_GetDescriptor+0x204>
 800540c:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <USBD_GetDescriptor+0xb4>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005461 	.word	0x08005461
 800541c:	08005495 	.word	0x08005495
 8005420:	080054c9 	.word	0x080054c9
 8005424:	080054fd 	.word	0x080054fd
 8005428:	08005531 	.word	0x08005531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00b      	beq.n	8005450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	7c12      	ldrb	r2, [r2, #16]
 8005444:	f107 0108 	add.w	r1, r7, #8
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
 800544c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800544e:	e091      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fab2 	bl	80059bc <USBD_CtlError>
            err++;
 8005458:	7afb      	ldrb	r3, [r7, #11]
 800545a:	3301      	adds	r3, #1
 800545c:	72fb      	strb	r3, [r7, #11]
          break;
 800545e:	e089      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	7c12      	ldrb	r2, [r2, #16]
 8005478:	f107 0108 	add.w	r1, r7, #8
 800547c:	4610      	mov	r0, r2
 800547e:	4798      	blx	r3
 8005480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005482:	e077      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa98 	bl	80059bc <USBD_CtlError>
            err++;
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	3301      	adds	r3, #1
 8005490:	72fb      	strb	r3, [r7, #11]
          break;
 8005492:	e06f      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	7c12      	ldrb	r2, [r2, #16]
 80054ac:	f107 0108 	add.w	r1, r7, #8
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
 80054b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054b6:	e05d      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa7e 	bl	80059bc <USBD_CtlError>
            err++;
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	3301      	adds	r3, #1
 80054c4:	72fb      	strb	r3, [r7, #11]
          break;
 80054c6:	e055      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	7c12      	ldrb	r2, [r2, #16]
 80054e0:	f107 0108 	add.w	r1, r7, #8
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
 80054e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054ea:	e043      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa64 	bl	80059bc <USBD_CtlError>
            err++;
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	3301      	adds	r3, #1
 80054f8:	72fb      	strb	r3, [r7, #11]
          break;
 80054fa:	e03b      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	7c12      	ldrb	r2, [r2, #16]
 8005514:	f107 0108 	add.w	r1, r7, #8
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
 800551c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800551e:	e029      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa4a 	bl	80059bc <USBD_CtlError>
            err++;
 8005528:	7afb      	ldrb	r3, [r7, #11]
 800552a:	3301      	adds	r3, #1
 800552c:	72fb      	strb	r3, [r7, #11]
          break;
 800552e:	e021      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	7c12      	ldrb	r2, [r2, #16]
 8005548:	f107 0108 	add.w	r1, r7, #8
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
 8005550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005552:	e00f      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa30 	bl	80059bc <USBD_CtlError>
            err++;
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	3301      	adds	r3, #1
 8005560:	72fb      	strb	r3, [r7, #11]
          break;
 8005562:	e007      	b.n	8005574 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa28 	bl	80059bc <USBD_CtlError>
          err++;
 800556c:	7afb      	ldrb	r3, [r7, #11]
 800556e:	3301      	adds	r3, #1
 8005570:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005572:	bf00      	nop
      }
      break;
 8005574:	e037      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7c1b      	ldrb	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005586:	f107 0208 	add.w	r2, r7, #8
 800558a:	4610      	mov	r0, r2
 800558c:	4798      	blx	r3
 800558e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005590:	e029      	b.n	80055e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa11 	bl	80059bc <USBD_CtlError>
        err++;
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	3301      	adds	r3, #1
 800559e:	72fb      	strb	r3, [r7, #11]
      break;
 80055a0:	e021      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7c1b      	ldrb	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10d      	bne.n	80055c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	f107 0208 	add.w	r2, r7, #8
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
 80055ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	2207      	movs	r2, #7
 80055c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055c4:	e00f      	b.n	80055e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9f7 	bl	80059bc <USBD_CtlError>
        err++;
 80055ce:	7afb      	ldrb	r3, [r7, #11]
 80055d0:	3301      	adds	r3, #1
 80055d2:	72fb      	strb	r3, [r7, #11]
      break;
 80055d4:	e007      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f9ef 	bl	80059bc <USBD_CtlError>
      err++;
 80055de:	7afb      	ldrb	r3, [r7, #11]
 80055e0:	3301      	adds	r3, #1
 80055e2:	72fb      	strb	r3, [r7, #11]
      break;
 80055e4:	bf00      	nop
  }

  if (err != 0U)
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11e      	bne.n	800562a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	88db      	ldrh	r3, [r3, #6]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d016      	beq.n	8005622 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80055f4:	893b      	ldrh	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00e      	beq.n	8005618 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	88da      	ldrh	r2, [r3, #6]
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	4293      	cmp	r3, r2
 8005602:	bf28      	it	cs
 8005604:	4613      	movcs	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800560a:	893b      	ldrh	r3, [r7, #8]
 800560c:	461a      	mov	r2, r3
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa44 	bl	8005a9e <USBD_CtlSendData>
 8005616:	e009      	b.n	800562c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9ce 	bl	80059bc <USBD_CtlError>
 8005620:	e004      	b.n	800562c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa95 	bl	8005b52 <USBD_CtlSendStatus>
 8005628:	e000      	b.n	800562c <USBD_GetDescriptor+0x2cc>
    return;
 800562a:	bf00      	nop
  }
}
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop

08005634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	889b      	ldrh	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d131      	bne.n	80056aa <USBD_SetAddress+0x76>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	88db      	ldrh	r3, [r3, #6]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d12d      	bne.n	80056aa <USBD_SetAddress+0x76>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	885b      	ldrh	r3, [r3, #2]
 8005652:	2b7f      	cmp	r3, #127	; 0x7f
 8005654:	d829      	bhi.n	80056aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	885b      	ldrh	r3, [r3, #2]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b03      	cmp	r3, #3
 800566c:	d104      	bne.n	8005678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9a3 	bl	80059bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005676:	e01d      	b.n	80056b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 ff01 	bl	800648c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa61 	bl	8005b52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569e:	e009      	b.n	80056b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a8:	e004      	b.n	80056b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f985 	bl	80059bc <USBD_CtlError>
  }
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	885b      	ldrh	r3, [r3, #2]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <USBD_SetConfig+0x148>)
 80056d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80056d4:	4b4b      	ldr	r3, [pc, #300]	; (8005804 <USBD_SetConfig+0x148>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d905      	bls.n	80056e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f96c 	bl	80059bc <USBD_CtlError>
    return USBD_FAIL;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e088      	b.n	80057fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d002      	beq.n	80056fa <USBD_SetConfig+0x3e>
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d025      	beq.n	8005744 <USBD_SetConfig+0x88>
 80056f8:	e071      	b.n	80057de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80056fa:	4b42      	ldr	r3, [pc, #264]	; (8005804 <USBD_SetConfig+0x148>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01c      	beq.n	800573c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005702:	4b40      	ldr	r3, [pc, #256]	; (8005804 <USBD_SetConfig+0x148>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800570c:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <USBD_SetConfig+0x148>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff f948 	bl	80049a8 <USBD_SetClassConfig>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f949 	bl	80059bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800572a:	e065      	b.n	80057f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fa10 	bl	8005b52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800573a:	e05d      	b.n	80057f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fa08 	bl	8005b52 <USBD_CtlSendStatus>
      break;
 8005742:	e059      	b.n	80057f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005744:	4b2f      	ldr	r3, [pc, #188]	; (8005804 <USBD_SetConfig+0x148>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d112      	bne.n	8005772 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005754:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <USBD_SetConfig+0x148>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <USBD_SetConfig+0x148>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff f93b 	bl	80049e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f9f1 	bl	8005b52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005770:	e042      	b.n	80057f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005772:	4b24      	ldr	r3, [pc, #144]	; (8005804 <USBD_SetConfig+0x148>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d02a      	beq.n	80057d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff f929 	bl	80049e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <USBD_SetConfig+0x148>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <USBD_SetConfig+0x148>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff f902 	bl	80049a8 <USBD_SetClassConfig>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00f      	beq.n	80057ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f903 	bl	80059bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff f90e 	bl	80049e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80057cc:	e014      	b.n	80057f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9bf 	bl	8005b52 <USBD_CtlSendStatus>
      break;
 80057d4:	e010      	b.n	80057f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9bb 	bl	8005b52 <USBD_CtlSendStatus>
      break;
 80057dc:	e00c      	b.n	80057f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8eb 	bl	80059bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <USBD_SetConfig+0x148>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff f8f7 	bl	80049e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80057f2:	2303      	movs	r3, #3
 80057f4:	73fb      	strb	r3, [r7, #15]
      break;
 80057f6:	bf00      	nop
  }

  return ret;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	2000019c 	.word	0x2000019c

08005808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	88db      	ldrh	r3, [r3, #6]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d004      	beq.n	8005824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8cd 	bl	80059bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005822:	e023      	b.n	800586c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	dc02      	bgt.n	8005836 <USBD_GetConfig+0x2e>
 8005830:	2b00      	cmp	r3, #0
 8005832:	dc03      	bgt.n	800583c <USBD_GetConfig+0x34>
 8005834:	e015      	b.n	8005862 <USBD_GetConfig+0x5a>
 8005836:	2b03      	cmp	r3, #3
 8005838:	d00b      	beq.n	8005852 <USBD_GetConfig+0x4a>
 800583a:	e012      	b.n	8005862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3308      	adds	r3, #8
 8005846:	2201      	movs	r2, #1
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f927 	bl	8005a9e <USBD_CtlSendData>
        break;
 8005850:	e00c      	b.n	800586c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3304      	adds	r3, #4
 8005856:	2201      	movs	r2, #1
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f91f 	bl	8005a9e <USBD_CtlSendData>
        break;
 8005860:	e004      	b.n	800586c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f8a9 	bl	80059bc <USBD_CtlError>
        break;
 800586a:	bf00      	nop
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005884:	b2db      	uxtb	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	2b02      	cmp	r3, #2
 800588a:	d81e      	bhi.n	80058ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	88db      	ldrh	r3, [r3, #6]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d004      	beq.n	800589e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f890 	bl	80059bc <USBD_CtlError>
        break;
 800589c:	e01a      	b.n	80058d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f043 0202 	orr.w	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	330c      	adds	r3, #12
 80058be:	2202      	movs	r2, #2
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8eb 	bl	8005a9e <USBD_CtlSendData>
      break;
 80058c8:	e004      	b.n	80058d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f875 	bl	80059bc <USBD_CtlError>
      break;
 80058d2:	bf00      	nop
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d106      	bne.n	80058fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f92b 	bl	8005b52 <USBD_CtlSendStatus>
  }
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005914:	b2db      	uxtb	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	2b02      	cmp	r3, #2
 800591a:	d80b      	bhi.n	8005934 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d10c      	bne.n	800593e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f910 	bl	8005b52 <USBD_CtlSendStatus>
      }
      break;
 8005932:	e004      	b.n	800593e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f840 	bl	80059bc <USBD_CtlError>
      break;
 800593c:	e000      	b.n	8005940 <USBD_ClrFeature+0x3c>
      break;
 800593e:	bf00      	nop
  }
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	781a      	ldrb	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fabb 	bl	8004eee <SWAPBYTE>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f7ff faae 	bl	8004eee <SWAPBYTE>
 8005992:	4603      	mov	r3, r0
 8005994:	461a      	mov	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff faa1 	bl	8004eee <SWAPBYTE>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	80da      	strh	r2, [r3, #6]
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fcf5 	bl	80063b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fcf1 	bl	80063b8 <USBD_LL_StallEP>
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d036      	beq.n	8005a62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80059f8:	6938      	ldr	r0, [r7, #16]
 80059fa:	f000 f836 	bl	8005a6a <USBD_GetLen>
 80059fe:	4603      	mov	r3, r0
 8005a00:	3301      	adds	r3, #1
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4413      	add	r3, r2
 8005a24:	2203      	movs	r2, #3
 8005a26:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005a2e:	e013      	b.n	8005a58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	613b      	str	r3, [r7, #16]
    idx++;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	3301      	adds	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
    idx++;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	3301      	adds	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e7      	bne.n	8005a30 <USBD_GetString+0x52>
 8005a60:	e000      	b.n	8005a64 <USBD_GetString+0x86>
    return;
 8005a62:	bf00      	nop
  }
}
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005a7a:	e005      	b.n	8005a88 <USBD_GetLen+0x1e>
  {
    len++;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f5      	bne.n	8005a7c <USBD_GetLen+0x12>
  }

  return len;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fd00 	bl	80064ca <USBD_LL_Transmit>

  return USBD_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fcef 	bl	80064ca <USBD_LL_Transmit>

  return USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2203      	movs	r2, #3
 8005b06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	2100      	movs	r1, #0
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fcf3 	bl	800650c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	2100      	movs	r1, #0
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fce2 	bl	800650c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b62:	2300      	movs	r3, #0
 8005b64:	2200      	movs	r2, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fcae 	bl	80064ca <USBD_LL_Transmit>

  return USBD_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2205      	movs	r2, #5
 8005b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fcbc 	bl	800650c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4912      	ldr	r1, [pc, #72]	; (8005bf0 <MX_USB_DEVICE_Init+0x50>)
 8005ba8:	4812      	ldr	r0, [pc, #72]	; (8005bf4 <MX_USB_DEVICE_Init+0x54>)
 8005baa:	f7fe fe8f 	bl	80048cc <USBD_Init>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005bb4:	f7fa fe10 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005bb8:	490f      	ldr	r1, [pc, #60]	; (8005bf8 <MX_USB_DEVICE_Init+0x58>)
 8005bba:	480e      	ldr	r0, [pc, #56]	; (8005bf4 <MX_USB_DEVICE_Init+0x54>)
 8005bbc:	f7fe feb6 	bl	800492c <USBD_RegisterClass>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005bc6:	f7fa fe07 	bl	80007d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005bca:	490c      	ldr	r1, [pc, #48]	; (8005bfc <MX_USB_DEVICE_Init+0x5c>)
 8005bcc:	4809      	ldr	r0, [pc, #36]	; (8005bf4 <MX_USB_DEVICE_Init+0x54>)
 8005bce:	f7fe fdd7 	bl	8004780 <USBD_CDC_RegisterInterface>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005bd8:	f7fa fdfe 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005bdc:	4805      	ldr	r0, [pc, #20]	; (8005bf4 <MX_USB_DEVICE_Init+0x54>)
 8005bde:	f7fe fecc 	bl	800497a <USBD_Start>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005be8:	f7fa fdf6 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005bec:	bf00      	nop
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000130 	.word	0x20000130
 8005bf4:	200003c4 	.word	0x200003c4
 8005bf8:	20000018 	.word	0x20000018
 8005bfc:	2000011c 	.word	0x2000011c

08005c00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c04:	2200      	movs	r2, #0
 8005c06:	4905      	ldr	r1, [pc, #20]	; (8005c1c <CDC_Init_FS+0x1c>)
 8005c08:	4805      	ldr	r0, [pc, #20]	; (8005c20 <CDC_Init_FS+0x20>)
 8005c0a:	f7fe fdce 	bl	80047aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c0e:	4905      	ldr	r1, [pc, #20]	; (8005c24 <CDC_Init_FS+0x24>)
 8005c10:	4803      	ldr	r0, [pc, #12]	; (8005c20 <CDC_Init_FS+0x20>)
 8005c12:	f7fe fde8 	bl	80047e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005c16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000e94 	.word	0x20000e94
 8005c20:	200003c4 	.word	0x200003c4
 8005c24:	20000694 	.word	0x20000694

08005c28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005c2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c48:	79fb      	ldrb	r3, [r7, #7]
 8005c4a:	2b23      	cmp	r3, #35	; 0x23
 8005c4c:	d84a      	bhi.n	8005ce4 <CDC_Control_FS+0xac>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <CDC_Control_FS+0x1c>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005ce5 	.word	0x08005ce5
 8005c58:	08005ce5 	.word	0x08005ce5
 8005c5c:	08005ce5 	.word	0x08005ce5
 8005c60:	08005ce5 	.word	0x08005ce5
 8005c64:	08005ce5 	.word	0x08005ce5
 8005c68:	08005ce5 	.word	0x08005ce5
 8005c6c:	08005ce5 	.word	0x08005ce5
 8005c70:	08005ce5 	.word	0x08005ce5
 8005c74:	08005ce5 	.word	0x08005ce5
 8005c78:	08005ce5 	.word	0x08005ce5
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005ce5 	.word	0x08005ce5
 8005c84:	08005ce5 	.word	0x08005ce5
 8005c88:	08005ce5 	.word	0x08005ce5
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005ce5 	.word	0x08005ce5
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005ce5 	.word	0x08005ce5
 8005ca4:	08005ce5 	.word	0x08005ce5
 8005ca8:	08005ce5 	.word	0x08005ce5
 8005cac:	08005ce5 	.word	0x08005ce5
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ce5 	.word	0x08005ce5
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ce5 	.word	0x08005ce5
 8005cd0:	08005ce5 	.word	0x08005ce5
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005ce5 	.word	0x08005ce5
 8005cdc:	08005ce5 	.word	0x08005ce5
 8005ce0:	08005ce5 	.word	0x08005ce5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ce4:	bf00      	nop
  }

  return (USBD_OK);
 8005ce6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4808      	ldr	r0, [pc, #32]	; (8005d24 <CDC_Receive_FS+0x30>)
 8005d02:	f7fe fd70 	bl	80047e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005d06:	4807      	ldr	r0, [pc, #28]	; (8005d24 <CDC_Receive_FS+0x30>)
 8005d08:	f7fe fdb6 	bl	8004878 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf, *Len);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f807 	bl	8005d28 <CDC_Transmit_FS>
  return (USBD_OK);
 8005d1a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200003c4 	.word	0x200003c4

08005d28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <CDC_Transmit_FS+0x48>)
 8005d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e00b      	b.n	8005d66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d4e:	887b      	ldrh	r3, [r7, #2]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4806      	ldr	r0, [pc, #24]	; (8005d70 <CDC_Transmit_FS+0x48>)
 8005d56:	f7fe fd28 	bl	80047aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d5a:	4805      	ldr	r0, [pc, #20]	; (8005d70 <CDC_Transmit_FS+0x48>)
 8005d5c:	f7fe fd5c 	bl	8004818 <USBD_CDC_TransmitPacket>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	200003c4 	.word	0x200003c4

08005d74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2212      	movs	r2, #18
 8005da8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005daa:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	2000014c 	.word	0x2000014c

08005dbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	20000160 	.word	0x20000160

08005de0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4907      	ldr	r1, [pc, #28]	; (8005e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8005df6:	4808      	ldr	r0, [pc, #32]	; (8005e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8005df8:	f7ff fdf1 	bl	80059de <USBD_GetString>
 8005dfc:	e004      	b.n	8005e08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	4904      	ldr	r1, [pc, #16]	; (8005e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e02:	4805      	ldr	r0, [pc, #20]	; (8005e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e04:	f7ff fdeb 	bl	80059de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20001694 	.word	0x20001694
 8005e18:	0800666c 	.word	0x0800666c

08005e1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	4904      	ldr	r1, [pc, #16]	; (8005e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e2c:	4804      	ldr	r0, [pc, #16]	; (8005e40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e2e:	f7ff fdd6 	bl	80059de <USBD_GetString>
  return USBD_StrDesc;
 8005e32:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20001694 	.word	0x20001694
 8005e40:	08006684 	.word	0x08006684

08005e44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	6039      	str	r1, [r7, #0]
 8005e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	221a      	movs	r2, #26
 8005e54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e56:	f000 f843 	bl	8005ee0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e5a:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000164 	.word	0x20000164

08005e68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4907      	ldr	r1, [pc, #28]	; (8005e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e7e:	4808      	ldr	r0, [pc, #32]	; (8005ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e80:	f7ff fdad 	bl	80059de <USBD_GetString>
 8005e84:	e004      	b.n	8005e90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	4904      	ldr	r1, [pc, #16]	; (8005e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e8a:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e8c:	f7ff fda7 	bl	80059de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20001694 	.word	0x20001694
 8005ea0:	08006698 	.word	0x08006698

08005ea4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4907      	ldr	r1, [pc, #28]	; (8005ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005eba:	4808      	ldr	r0, [pc, #32]	; (8005edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ebc:	f7ff fd8f 	bl	80059de <USBD_GetString>
 8005ec0:	e004      	b.n	8005ecc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4904      	ldr	r1, [pc, #16]	; (8005ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ec6:	4805      	ldr	r0, [pc, #20]	; (8005edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ec8:	f7ff fd89 	bl	80059de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ecc:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20001694 	.word	0x20001694
 8005edc:	080066a4 	.word	0x080066a4

08005ee0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <Get_SerialNum+0x44>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005eec:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <Get_SerialNum+0x48>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <Get_SerialNum+0x4c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f06:	2208      	movs	r2, #8
 8005f08:	4909      	ldr	r1, [pc, #36]	; (8005f30 <Get_SerialNum+0x50>)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f814 	bl	8005f38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f10:	2204      	movs	r2, #4
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <Get_SerialNum+0x54>)
 8005f14:	68b8      	ldr	r0, [r7, #8]
 8005f16:	f000 f80f 	bl	8005f38 <IntToUnicode>
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	1fff7a10 	.word	0x1fff7a10
 8005f28:	1fff7a14 	.word	0x1fff7a14
 8005f2c:	1fff7a18 	.word	0x1fff7a18
 8005f30:	20000166 	.word	0x20000166
 8005f34:	20000176 	.word	0x20000176

08005f38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]
 8005f4e:	e027      	b.n	8005fa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0f1b      	lsrs	r3, r3, #28
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	d80b      	bhi.n	8005f70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	0f1b      	lsrs	r3, r3, #28
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4619      	mov	r1, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	440b      	add	r3, r1
 8005f68:	3230      	adds	r2, #48	; 0x30
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	e00a      	b.n	8005f86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	0f1b      	lsrs	r3, r3, #28
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	440b      	add	r3, r1
 8005f80:	3237      	adds	r2, #55	; 0x37
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	3301      	adds	r3, #1
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	4413      	add	r3, r2
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	75fb      	strb	r3, [r7, #23]
 8005fa0:	7dfa      	ldrb	r2, [r7, #23]
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3d3      	bcc.n	8005f50 <IntToUnicode+0x18>
  }
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
	...

08005fb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fd8:	d147      	bne.n	800606a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	4a24      	ldr	r2, [pc, #144]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005ff6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006004:	2303      	movs	r3, #3
 8006006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006008:	230a      	movs	r3, #10
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4619      	mov	r1, r3
 8006012:	4819      	ldr	r0, [pc, #100]	; (8006078 <HAL_PCD_MspInit+0xc0>)
 8006014:	f7fa fe26 	bl	8000c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800601c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	4619      	mov	r1, r3
 800602c:	4812      	ldr	r0, [pc, #72]	; (8006078 <HAL_PCD_MspInit+0xc0>)
 800602e:	f7fa fe19 	bl	8000c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	6353      	str	r3, [r2, #52]	; 0x34
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8006044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006046:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8006048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800604c:	6453      	str	r3, [r2, #68]	; 0x44
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_PCD_MspInit+0xbc>)
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	2043      	movs	r0, #67	; 0x43
 8006060:	f7fa fdc9 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006064:	2043      	movs	r0, #67	; 0x43
 8006066:	f7fa fde2 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800606a:	bf00      	nop
 800606c:	3728      	adds	r7, #40	; 0x28
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	40020000 	.word	0x40020000

0800607c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7fe fcbc 	bl	8004a10 <USBD_LL_SetupStage>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	4619      	mov	r1, r3
 80060ca:	f7fe fcf6 	bl	8004aba <USBD_LL_DataOutStage>
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	3348      	adds	r3, #72	; 0x48
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	4619      	mov	r1, r3
 80060fe:	f7fe fd3f 	bl	8004b80 <USBD_LL_DataInStage>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe fe53 	bl	8004dc4 <USBD_LL_SOF>
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800612e:	2301      	movs	r3, #1
 8006130:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
 800613e:	e008      	b.n	8006152 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d102      	bne.n	800614e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006148:	2301      	movs	r3, #1
 800614a:	73fb      	strb	r3, [r7, #15]
 800614c:	e001      	b.n	8006152 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800614e:	f7fa fb43 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fdf3 	bl	8004d48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fd9f 	bl	8004cac <USBD_LL_Reset>
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fdee 	bl	8004d68 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800619e:	f043 0301 	orr.w	r3, r3, #1
 80061a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061ac:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <HAL_PCD_SuspendCallback+0x48>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	4a03      	ldr	r2, [pc, #12]	; (80061c0 <HAL_PCD_SuspendCallback+0x48>)
 80061b2:	f043 0306 	orr.w	r3, r3, #6
 80061b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	e000ed00 	.word	0xe000ed00

080061c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fdde 	bl	8004d94 <USBD_LL_Resume>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fe2c 	bl	8004e54 <USBD_LL_IsoOUTIncomplete>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	4611      	mov	r1, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fdf4 	bl	8004e08 <USBD_LL_IsoINIncomplete>
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fe32 	bl	8004ea0 <USBD_LL_DevConnected>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fe2f 	bl	8004eb6 <USBD_LL_DevDisconnected>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d13c      	bne.n	80062ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <USBD_LL_Init+0x94>)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <USBD_LL_Init+0x94>)
 800627c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006280:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <USBD_LL_Init+0x94>)
 8006282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006286:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <USBD_LL_Init+0x94>)
 800628a:	2204      	movs	r2, #4
 800628c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <USBD_LL_Init+0x94>)
 8006290:	2202      	movs	r2, #2
 8006292:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006294:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <USBD_LL_Init+0x94>)
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <USBD_LL_Init+0x94>)
 800629c:	2202      	movs	r2, #2
 800629e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <USBD_LL_Init+0x94>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <USBD_LL_Init+0x94>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <USBD_LL_Init+0x94>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <USBD_LL_Init+0x94>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <USBD_LL_Init+0x94>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80062be:	480d      	ldr	r0, [pc, #52]	; (80062f4 <USBD_LL_Init+0x94>)
 80062c0:	f7fa fe95 	bl	8000fee <HAL_PCD_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80062ca:	f7fa fa85 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	4808      	ldr	r0, [pc, #32]	; (80062f4 <USBD_LL_Init+0x94>)
 80062d2:	f7fb fff2 	bl	80022ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	2100      	movs	r1, #0
 80062da:	4806      	ldr	r0, [pc, #24]	; (80062f4 <USBD_LL_Init+0x94>)
 80062dc:	f7fb ffa6 	bl	800222c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	2101      	movs	r1, #1
 80062e4:	4803      	ldr	r0, [pc, #12]	; (80062f4 <USBD_LL_Init+0x94>)
 80062e6:	f7fb ffa1 	bl	800222c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20001894 	.word	0x20001894

080062f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800630e:	4618      	mov	r0, r3
 8006310:	f7fa ff8a 	bl	8001228 <HAL_PCD_Start>
 8006314:	4603      	mov	r3, r0
 8006316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f942 	bl	80065a4 <USBD_Get_USB_Status>
 8006320:	4603      	mov	r3, r0
 8006322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006324:	7bbb      	ldrb	r3, [r7, #14]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	4608      	mov	r0, r1
 8006338:	4611      	mov	r1, r2
 800633a:	461a      	mov	r2, r3
 800633c:	4603      	mov	r3, r0
 800633e:	70fb      	strb	r3, [r7, #3]
 8006340:	460b      	mov	r3, r1
 8006342:	70bb      	strb	r3, [r7, #2]
 8006344:	4613      	mov	r3, r2
 8006346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006356:	78bb      	ldrb	r3, [r7, #2]
 8006358:	883a      	ldrh	r2, [r7, #0]
 800635a:	78f9      	ldrb	r1, [r7, #3]
 800635c:	f7fb fb6e 	bl	8001a3c <HAL_PCD_EP_Open>
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f91c 	bl	80065a4 <USBD_Get_USB_Status>
 800636c:	4603      	mov	r3, r0
 800636e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006370:	7bbb      	ldrb	r3, [r7, #14]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7fb fbb7 	bl	8001b0c <HAL_PCD_EP_Close>
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f8fd 	bl	80065a4 <USBD_Get_USB_Status>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fb fc8f 	bl	8001cfa <HAL_PCD_EP_SetStall>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f8de 	bl	80065a4 <USBD_Get_USB_Status>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7fb fcd4 	bl	8001dc2 <HAL_PCD_EP_ClrStall>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f8bf 	bl	80065a4 <USBD_Get_USB_Status>
 8006426:	4603      	mov	r3, r0
 8006428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800642a:	7bbb      	ldrb	r3, [r7, #14]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800644c:	2b00      	cmp	r3, #0
 800644e:	da0b      	bge.n	8006468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	333e      	adds	r3, #62	; 0x3e
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	e00b      	b.n	8006480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	4613      	mov	r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800647e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064a6:	78fa      	ldrb	r2, [r7, #3]
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fb faa1 	bl	80019f2 <HAL_PCD_SetAddress>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f874 	bl	80065a4 <USBD_Get_USB_Status>
 80064bc:	4603      	mov	r3, r0
 80064be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b086      	sub	sp, #24
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	460b      	mov	r3, r1
 80064d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064e8:	7af9      	ldrb	r1, [r7, #11]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	f7fb fbba 	bl	8001c66 <HAL_PCD_EP_Transmit>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 f853 	bl	80065a4 <USBD_Get_USB_Status>
 80064fe:	4603      	mov	r3, r0
 8006500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006502:	7dbb      	ldrb	r3, [r7, #22]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	460b      	mov	r3, r1
 800651a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800652a:	7af9      	ldrb	r1, [r7, #11]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	f7fb fb36 	bl	8001ba0 <HAL_PCD_EP_Receive>
 8006534:	4603      	mov	r3, r0
 8006536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f832 	bl	80065a4 <USBD_Get_USB_Status>
 8006540:	4603      	mov	r3, r0
 8006542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006544:	7dbb      	ldrb	r3, [r7, #22]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006560:	78fa      	ldrb	r2, [r7, #3]
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f7fb fb66 	bl	8001c36 <HAL_PCD_EP_GetRxCount>
 800656a:	4603      	mov	r3, r0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <USBD_static_malloc+0x18>)
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	200001a0 	.word	0x200001a0

08006590 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d817      	bhi.n	80065e8 <USBD_Get_USB_Status+0x44>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USBD_Get_USB_Status+0x1c>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065d7 	.word	0x080065d7
 80065c8:	080065dd 	.word	0x080065dd
 80065cc:	080065e3 	.word	0x080065e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
    break;
 80065d4:	e00b      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065d6:	2303      	movs	r3, #3
 80065d8:	73fb      	strb	r3, [r7, #15]
    break;
 80065da:	e008      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
    break;
 80065e0:	e005      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065e2:	2303      	movs	r3, #3
 80065e4:	73fb      	strb	r3, [r7, #15]
    break;
 80065e6:	e002      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80065e8:	2303      	movs	r3, #3
 80065ea:	73fb      	strb	r3, [r7, #15]
    break;
 80065ec:	bf00      	nop
  }
  return usb_status;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	; (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	; (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x44>)
 8006610:	f000 f820 	bl	8006654 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	080066cc 	.word	0x080066cc
 8006638:	080066cc 	.word	0x080066cc
 800663c:	080066cc 	.word	0x080066cc
 8006640:	080066d0 	.word	0x080066d0

08006644 <memset>:
 8006644:	4402      	add	r2, r0
 8006646:	4603      	mov	r3, r0
 8006648:	4293      	cmp	r3, r2
 800664a:	d100      	bne.n	800664e <memset+0xa>
 800664c:	4770      	bx	lr
 800664e:	f803 1b01 	strb.w	r1, [r3], #1
 8006652:	e7f9      	b.n	8006648 <memset+0x4>

08006654 <_init>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	bf00      	nop
 8006658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665a:	bc08      	pop	{r3}
 800665c:	469e      	mov	lr, r3
 800665e:	4770      	bx	lr

08006660 <_fini>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr
